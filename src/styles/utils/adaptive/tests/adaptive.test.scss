@use "pkg:sass-true" as *;

@use "sass:string" as *;

@use "../adaptive" as *;
@use "../../size/size" as *;
@use "variables" as *;
@use "mocks" as *;

@include describe("Adaptive Clamp Unit Tests") {
  @include it("Must return correct clamp() value for decreasing range") {
    @include assert-equal(
      adaptive-clamp($from, $to, $screen-from, $screen-to),
      mocked-clamp-for-decreasing-range(),
      $description: null,
      $inspect: true
    );
  }

  @include it("Must return correct clamp() value for increasing range") {
    @include assert-equal(
      adaptive-clamp($to, $from, $screen-from, $screen-to),
      mocked-clamp-for-increasing-range(),
      $description: null,
      $inspect: true
    );
  }

  @include it("Must return fixed value when $from equals $to") {
    @include assert-equal(
      adaptive-clamp($to, $to, $screen-from, $screen-to),
      mocked-fixed-value-clamp(),
      $description: null,
      $inspect: true
    );
  }

  @include it("Must correctly handle negative sizes") {
    @include assert-equal(
      adaptive-clamp(-$from, -$to, $screen-from, $screen-to),
      mocked-clamp-with-negative-sizes(),
      $description: null,
      $inspect: true
    );
  }

  @include it("Must throw error if input is null") {
    @include assert-equal(
      adaptive-clamp(null, null, null, null),
      "adaptive-clamp: inputs must not be null."
    );
  }

  @include it("Must throw error if screen sizes are equal to each other") {
    @include assert-equal(
      adaptive-clamp($from, $to, $screen-from, $screen-from),
      "adaptive-clamp: divide by zero."
    );
  }
}
